package com.formation.bankonet.controller;

import com.formation.bankonet.models.Client;
import com.formation.bankonet.models.Compte;
import com.formation.bankonet.models.CompteCourant;
import com.formation.bankonet.models.CompteEpargne;
import com.formation.bankonet.repositories.ClientRepository;
import com.formation.bankonet.repositories.CompteCourantRepository;
import com.formation.bankonet.repositories.CompteEpargneRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.util.ArrayList;
import java.util.List;

@Controller // This means that this class is a Controller
@RequestMapping(path="/client") // This means URL's start with /demo (after Application path)
public class MainController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private ClientRepository clientRepository;


    /*
            Client Handling

            addNewClient -> POST

            getListClients -> GET

            getClient -> GET
     */
    @PostMapping(path="/addClient") // Map ONLY POST Requests
    public @ResponseBody
    String addNewClient (@RequestParam String p_nom
            , @RequestParam String p_prenom) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        Client n = new Client();
        n.setNom(p_nom);
        n.setPrenom(p_prenom);
        clientRepository.save(n);
        return "Client Saved";
    }

    @GetMapping(path="/allClient")
    public @ResponseBody Iterable<Client> getListClients() {
        // This returns a JSON or XML with the users
        return clientRepository.findAll();
    }


    @DeleteMapping(path="/deleteClient")
    public @ResponseBody String deleteCompteById(@RequestParam int p_ClientID) {

        clientRepository.deleteById(p_ClientID);
        return "Client deleted";
    }

    @PatchMapping(path="/updateClient")
    public @ResponseBody String deleteCompteById(@RequestParam String p_nom
            , @RequestParam String p_prenom) {

        Client n = new Client();
        n.setNom(p_nom);
        n.setPrenom(p_prenom);
        clientRepository.save(n);
        return "Client updated";
    }




    @GetMapping(path="/clientAccount")
    public @ResponseBody Client getClientAndAccount(@RequestParam int p_clientid){
        //clientRepository.findCompteClient(p_clientid)
/*
        Client c = new Client();

        List<Compte> compteList = new ArrayList<>();

        c = clientRepository.findById(p_clientid).get();

        while(clientRepository.findCompteClient(p_clientid).iterator().hasNext()) {
            c.addCompte(clientRepository.findCompteClient(p_clientid).iterator().next());
        }



        return c;*/
        return null;
    }

}
